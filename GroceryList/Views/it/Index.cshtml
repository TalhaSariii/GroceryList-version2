@using GroceryList.Models
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model IPagedList<Item>


@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_TestLayout.cshtml";
}




<script src="~/sweetalert/sweetalert2.all.min.js"></script>
<div class="container p-5 sa" style="background-color:#F2F2F2; color: black; text-align: center;">
    <h1>Grocery List</h1>
</div>

<div class="container">
    <div class="row">
        <div class="col-1"></div>
        <div class="col-3"></div>
        <div class="col-4"></div>
        <div class="col-4 tippp searchbox">
            <div class="search-container">
                <input type="text" id="search" onkeyup="searchByName()" placeholder="Type a name...">
                <span class="tooltiptext">Search by name</span>
                <i class="fas fa-search"></i>
            </div>

        </div>

    </div>

</div>

<div class="table-c">
    <table class="table-t">
        <tr>
            <th class="fixed-header">Creation Date</th>
            <th class="fixed-header">Modified Date</th>
            <th class="fixed-header ">Name</th>
            <th class="fixed-header ">Type</th>
            <th class="fixed-header">Amount</th>
            <th class="fixed-header ">Price</th>
            <th class="fixed-header">Shop Name</th>
            <th class="fixed-header">Is Active?</th>
            <th class="fixed-header ">Edit</th>
            <th class="fixed-header ">Delete</th>


        </tr>
        @foreach (var Item in Model)
        {
            <tr class="@(!Item.IsActive ? "inactive-row" : "")">
                <td class="date-font">@Item.CreateDate.ToString("dd.MM.yyyy hh:mm")</td>
                <td class="date-font">@Item.ModifiedDate.ToString("dd.MM.yyyy hh:mm")</td>
                <td>
                    @{
                        if (@Item.Name.Length > 8)
                        {
                            <div class="tippp">
                                @Item.Name.Substring(0,8)
                                <span class="tooltiptext">@Item.Name</span>
                            </div>
                        }
                        else
                        {
                            @Item.Name
                        }
                    }

                </td>
                <td>@Item.Type</td>
                <td>@Item.Amount</td>
                <td>@Item.Price</td>
                <td>
                    @{
                        if (@Item.ShopName.Length > 8)
                        {
                            <div class="tippp">
                                @Item.ShopName.Substring(0, 8)
                                <span class="tooltiptext">@Item.ShopName</span>
                            </div>
                        }
                        else
                        {

                            @Item.ShopName
                        }

                    }
                </td>
                <td>
                    <input type="checkbox" disabled id="isActiveCheckbox_@Item.Id" @(Item.IsActive ? "checked" : "") />
                </td>
                <td class="actions-cell">

                    <div class="edit-wrapper">
                        <a href="/it/EditItem/@Item.Id?userId=@TempData["UserId"]" class="btn btn-warning edit-link"><i class="fa-regular fa-pen-to-square"></i></a>
                    </div>
                </td>
                <td>

                    <div class="delete-wrapper">
                        <a href="/it/DeleteItem/@Item.Id" class="btn btn-danger delete-link" style=" background-color:#9d0208; color: white;"><i class="fa-solid fa-trash-can"></i></a>

                    </div>

                </td>
            </tr>
            @if (Item.IsEditing)
            {
                <form class="from-group" method="post" action="/it/EditItem" onsubmit="return validateForm()">
                    @Html.Hidden("Id", Item.Id) 
                  
                <tr>
                    <td class="date-font">@Item.CreateDate.ToString("dd.MM.yyyy")</td>
                    <td class="date-font">@Item.ModifiedDate.ToString("dd.MM.yyyy")</td>
                    <td>
                        <input type="text" id="Name" name="Name" value="@Item.Name" />
                    </td>
                    <td>
                        <input type="text" id="Type" name="Type" value="@Item.Type" />
                    </td>
                    <td>
                        <input type="number" id="Amount" name="Amount" value="@Item.Amount" />
                    </td>
                    <td>
                        <input type="number" id="Price" name="Price" value="@Item.Price" />
                    </td>
                    <td>
                        <input type="text" id="ShopName" name="ShopName" value="@Item.ShopName" />
                    </td>
                    <td>
                        <input type="checkbox" id="isActiveCheckboxEdit_@Item.Id" name="IsActive" @(Item.IsActive ? "checked" : "") />
                    </td>
                    <td>
                        <button type="submit" class="btn btn-success" style="background-color:#3f7d20; color: white;">
                            <i class="fas fa-floppy-disk"></i>
                        </button>


                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" style="background-color:#9d0208; color: white;" onclick="cancelEdit()">
                            <i class="fas fa-xmark"></i>
                        </button>

                    </td>
                </tr>
                </form>
            }
        }

    </table>

</div>
<div class="container ">
    <div class="row">
        <div class="col-1"></div>



        <div class="col-3">
            <a href="/it/newitem/" id="add" class="btn btn-primary" style=" background-color: #805AD5; color: white;" onclick="cancelEdit()">
                Add  <i class="fa-solid fa-plus"></i>
            </a>
        </div>

        <div class="col-4">
            @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new{page}),
            new PagedListRenderOptions
            {
            LiElementClasses = new string[] { "page-item" },
            PageClasses = new string[] { "page-link" },
            Display = PagedListDisplayMode.IfNeeded
            })
        </div>

        <div class="col-4 deneme">
            <label for="pageSize">Number of lines:</label>
            <select id="pageSize" onchange="changePageSize()">
                <option value="5">5</option>
                <option value="10">10</option>A
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>

</div>





<script>
    function searchByName() {
        const input = document.getElementById('search');
        const filter = input.value.toUpperCase();
        const tableRows = document.querySelectorAll('.table-t tr');

        tableRows.forEach(function (row) {
            const nameColumn = row.getElementsByTagName('td')[2];
            if (nameColumn) {
                const nameValue = nameColumn.textContent || nameColumn.innerText;
                if (nameValue.toUpperCase().indexOf(filter) > -1) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            }
        });
    }

    function changePageSize() {
        const selectedValue = document.getElementById('pageSize').value;
        window.location.href = `/it/Index?page=1&pageSize=${selectedValue}`;
    }

    function changePageSize() {
        const selectedValue = document.getElementById('pageSize').value;
        window.location.href = `/it/Index?page=1&pageSize=${selectedValue}`;
        const pageSizeText = selectedValue ? `${selectedValue} lines` : '';
        document.getElementById('pageSizeDisplay').textContent = pageSizeText;
    }

    document.addEventListener("DOMContentLoaded", function () {
        const deleteLinks = document.querySelectorAll(".delete-link");

        deleteLinks.forEach(function (link) {
            link.addEventListener("click", function (event) {
                event.preventDefault();

                const deleteUrl = this.getAttribute("href");

                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                });

                swalWithBootstrapButtons.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        swalWithBootstrapButtons.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success'
                        );
                        deleteItem(deleteUrl);
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        swalWithBootstrapButtons.fire(
                            'Cancelled',
                            'Your file is safe :)',
                            'error'
                        );
                    }
                });
            });
        });

        const tableRows = document.querySelectorAll("tr");
        tableRows.forEach(function (row) {
            const isActiveCheckbox = row.querySelector("input[type='checkbox'][disabled]");
            if (isActiveCheckbox && !isActiveCheckbox.checked) {
                row.classList.add("inactive-row");
            }
        });
    });

    function deleteItem(deleteUrl) {
        fetch(deleteUrl, {
            method: 'POST'
        })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    throw new Error('Deletion failed.');
                }
            })
            .catch(error => {
                console.error(error);
                Swal.fire(
                    'Error',
                    'An error occurred during the deletion process.',
                    'error'
                );
            });
    }

    function cancelEdit() {
        window.location.reload();
    }
    function validateForm() {
            var name = document.getElementById("Name").value;
            var type = document.getElementById("Type").value;
            var amount = parseFloat(document.getElementById("Amount").value);
            var price = parseFloat(document.getElementById("Price").value);
            var shopName = document.getElementById("ShopName").value;

            if (!name || !type || isNaN(amount) || isNaN(price) || !shopName) {
                Swal.fire('Please fill in all fields!');
                return false;
            }

            return true;
        }
</script>