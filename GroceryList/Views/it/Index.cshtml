@using GroceryList.Models
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model IPagedList<Item>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_TestLayout.cshtml";
}




<script src="~/sweetalert/sweetalert2.all.min.js"></script>




<div class="table-c">
    <table class="table-t">
        <tr>
            <th class="fixed-header">Creation Date</th>
            <th class="fixed-header">Modified Date</th>
            <th class="fixed-header">Name</th>
            <th class="fixed-header">Type</th>
            <th class="fixed-header">Amount</th>
            <th class="fixed-header">Price</th>
            <th class="fixed-header">Shop Name</th>
            <th class="fixed-header">Is Active?</th>
            <th class="fixed-header">Edit</th>
            <th class="fixed-header">Delete</th>
         

        </tr>
        @foreach (var Item in Model)
        {
            <tr class="@(!Item.IsActive ? "inactive-row" : "")">
                <td class="date-font">@Item.CreateDate.ToString("dd.MM.yyyy hh:mm")</td>
                <td class="date-font">@Item.ModifiedDate.ToString("dd.MM.yyyy hh:mm")</td>
                <td>
                    @{
                        if (@Item.Name.Length > 8)
                        {
                            <div class="tippp">
                                @Item.Name.Substring(0,8)
                    <span class="tooltiptext">@Item.Name</span>
                            </div>
                        }
                        else
                        {
                            @Item.Name
                        }
                    }
               
                </td>
                <td>@Item.Type</td>
                <td>@Item.Amount</td>
                <td>@Item.Price</td>
                <td>
                @{
                    if (@Item.ShopName.Length > 8)
                    {
                        <div class="tippp">
                        @Item.ShopName.Substring(0, 8)
                        <span class="tooltiptext">@Item.ShopName</span>
                        </div>
                    } else
                    {

                        @Item.ShopName
                    }
                 
                }
                </td>
                <td>
                    <input type="checkbox" disabled id="isActiveCheckbox_@Item.Id" @(Item.IsActive ? "checked" : "") />
                </td >
                <td class="actions-cell">

                    <div class="edit-wrapper">
                        <a href="/it/EditItem/@Item.Id" class="btn btn-warning edit-link" style=" background-color:#ffca3a; color: white;">Edit</a>
                    </div>
                </td>
                    <td>
                       
                    <div class="delete-wrapper">
                        <a href="/it/DeleteItem/@Item.Id" class="btn btn-danger delete-link" style=" background-color:#ff595e; color: white;">Delete</a>

                    </div>
                    
                </td>
            </tr>
            @if (Item.IsEditing)
            {
                <form method="post" action="/it/EditItem">
                    @Html.Hidden("Id", Item.Id)
                <tr>
                    <td class="date-font">@Item.CreateDate.ToString("dd.MM.yyyy")</td>
                    <td class="date-font">@Item.ModifiedDate.ToString("dd.MM.yyyy")</td>
                    <td><input type="text" name="Name" value="@Item.Name" /></td>
                    <td><input type="text" name="Type" value="@Item.Type" /></td>
                    <td><input type="number" name="Amount" value="@Item.Amount" /></td>
                    <td><input type="number" name="Price" value="@Item.Price" /></td>
                    <td><input type="text" name="ShopName" value="@Item.ShopName" /></td>
                    <td>
                        <input type="checkbox" id="isActiveCheckboxEdit_@Item.Id" name="IsActive" @(Item.IsActive ? "checked" : "") />
                    </td>
                    <td>
                        <input type="submit" value="Save" class="btn btn-success" style=" background-color:#8ac926; color: white;" />
                       
                    </td>
                    <td>
                        <input type="button" value="Cancel" class="btn btn-danger" style=" background-color:#ff595e; color: white;" onclick="cancelEdit()" />
                    </td>
                </tr>
                </form>
            }
        }
   
    </table>
  
</div>
<div class="container">
 <div class="row">
    <div class="col-4">
    
        <a href="/it/newitem/" id="add" class="btn btn-primary" style=" background-color:#1982c4; color: white;" onclick="cancelEdit()">Add</a>
    </div>


    <div class="col-4">

            @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new{page}),
            new PagedListRenderOptions
            {
            LiElementClasses = new string[] { "page-item" },
            PageClasses = new string[] { "page-link" },
            Display = PagedListDisplayMode.IfNeeded

            })
      
    </div>
        <div class="col-4 deneme">
                  
            <label for="pageSize">Number of lines:</label>
            <select id="pageSize" onchange="changePageSize(this.value)">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
         </div>
  </div>
</div>
<script>


    function changePageSize(pageSize) {
        window.location.href = `/it/Index?page=1&pageSize=${pageSize}`;
    }

    document.addEventListener("DOMContentLoaded", function () {

        const deleteLinks = document.querySelectorAll(".delete-link");


        deleteLinks.forEach(function (link) {
            link.addEventListener("click", function (event) {
                event.preventDefault();

                const deleteUrl = this.getAttribute("href");

                const swalWithBootstrapButtons = Swal.mixin({
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-danger'
                    },
                    buttonsStyling: false
                });
                swalWithBootstrapButtons.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'No, cancel!',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        swalWithBootstrapButtons.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success'
                        );
                        deleteItem(deleteUrl);
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        swalWithBootstrapButtons.fire(
                            'Cancelled',
                            'Your file is safe :)',
                            'error'
                        );
                    }
                });
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
         
            const tableRows = document.querySelectorAll("tr");
            tableRows.forEach(function (row) {
                const isActiveCheckbox = row.querySelector("input[type='checkbox'][disabled]");
                if (isActiveCheckbox && !isActiveCheckbox.checked) {
                    row.classList.add("inactive-row");
                }
            });
        });

        function deleteItem(deleteUrl) {
            fetch(deleteUrl, {
                method: 'POST'
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        throw new Error('Deletion failed.');
                    }
                })
                .catch(error => {
                    console.error(error);
                    swalWithBootstrapButtons.fire(
                        'Error',
                        'An error occurred during the deletion process.',
                        'error'
                    );
                });
        }
    });

        function cancelEdit() {
            window.location.reload();
        }
   
</script>
